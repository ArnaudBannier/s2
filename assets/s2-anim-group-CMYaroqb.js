import{D as o,s as r,i as n,E as c,l as m,o as p,n as h,F as a}from"./s2-lerp-anim-PicSQhJC.js";class d extends o{animations;propertyToAnimation;constructor(t){super(t),this.animations=[],this.propertyToAnimation=new Map}addAnimation(t){this.animations.push(t);for(const i of t.getProperties())this.properties.add(i),this.propertyToAnimation.set(i,t);return this.cycleDuration=Math.max(this.cycleDuration,t.getDuration()),this.updateRawDuration(),this}addAnimations(...t){for(const i of t)this.addAnimation(i);return this}addLerpProperties(t,i,e){for(const s of t)s instanceof r?this.addAnimation(n.create(this.scene,s).setCycleDuration(i).setEasing(e)):s instanceof c?this.addAnimation(n.create(this.scene,s).setCycleDuration(i).setEasing(e)):s instanceof m?this.addAnimation(n.create(this.scene,s).setCycleDuration(i).setEasing(e)):s instanceof p?this.addAnimation(n.create(this.scene,s).setCycleDuration(i).setEasing(e)):s instanceof h&&this.addAnimation(n.create(this.scene,s).setCycleDuration(i).setEasing(e));return this}commitLerpInitialStates(){for(const t of this.animations)t instanceof a&&t.commitInitialState();return this}commitLerpFinalStates(){for(const t of this.animations)t instanceof a&&t.commitFinalState();return this}setElapsedPropertyImpl(t){this.propertyToAnimation.get(t)?.setElapsedProperty(t,this.wrapedCycleElapsed)}}export{d as S};
