import"./modulepreload-polyfill-B5Qt9EMX.js";import{S as p,a as L,b as C,M as r}from"./s2-lerp-anim-Del0poW1.js";import{B as k,S as F}from"./base-memory-scene-tG6xURp8.js";import{S as b,t as f}from"./s2-code-DN5aJOX6.js";import"./s2-step-animator-CFLkTpzR.js";const w="Etat de la m√©moire : fonctions simples 1",A=`**type:int** **fn:main**(**type:void**) {
    **type:short** **var:a** = **num:1337**;
    **type:int** **var:b** = (**type:int**)**var:a** / **num:133**;
    **var:b** = **fn:func**(**var:a**, **var:b**);
    **kw:return** **num:0**;
}`,I=`**type:int** **fn:func**(**type:short** **var:a**, **type:int** **var:b**) {
    **type:int** **var:res** = **var:a** + **var:b** / **num:100**;
    **kw:for** (**type:int** **var:i** = **num:0**; **var:i** < **var:b**; **var:i**++)
        **var:res** += (**type:int**)**var:a** / **num:100**;
    **kw:return** **var:res**;
}`,E=1.5,x=new p(640,360).scale(E),V=new L(new p(0,0),new p(8,4.5),x);class H extends k{memory;codeFunc;codeMain;constructor(e){super(e,V),this.codeMain=new b(this),this.codeMain.setParent(this.getSVG()),this.setDefaultCodeStyle(this.codeMain),this.codeMain.setContent(f(A)),this.codeMain.data.position.set(-6,4,"world"),this.codeMain.data.anchor.set("north-west"),this.codeFunc=new b(this),this.codeFunc.setParent(this.getSVG()),this.setDefaultCodeStyle(this.codeFunc),this.codeFunc.setContent(f(I));const n=10;this.memory=new F(this,n,{isStacked:!0,addressStart:64,addressPrefix:"@",addressRadix:10}),this.memory.setParent(this.getSVG()),this.setDefaultMemoryStyle(this.memory),this.memory.data.position.set(6,0,"world"),this.update(),this.createAnimation()}createAnimation(){this.animator.makeStep();const e=r.LIME_2,n=r.GREY_5;let i=1;this.codeMain.animateSetCurrentLine(i++,this.animator);const h=this.memory.createMemoryId();h.animateSetNameAndValue("a","1337",this.animator,{valueColor:e}),this.animator.makeStep(),this.update(),this.codeMain.animateSetCurrentLine(i++,this.animator);const o=this.memory.createMemoryId();o.animateSetNameAndValue("b","10",this.animator,{valueColor:e}),this.animator.makeStep(),this.update(),this.codeMain.animateSetCurrentLine(i++,this.animator);let t=this.animator.createLabelAtCurrentTime();const v=this.codeMain.createTokenHighlight([{lineIndex:i-1,content:"func"}],r.CYAN);v.animateFadeIn(this.animator,{label:t}),this.animateCallIn(this.codeMain,this.codeFunc,3),o.animateHLine(this.animator,{color:r.CYAN,width:4,label:t}),this.animator.makeStep(),this.update();const d=this.memory.createMemoryId(),u=this.memory.createMemoryId();t=this.animator.createLabelAtCurrentTime(),d.animateSetName("a",this.animator,{label:t}),u.animateSetName("b",this.animator,{label:t,offset:100}),d.animateCopyValue(h,this.animator,{color:e}),u.animateCopyValue(o,this.animator,{color:e}),this.animator.makeStep(),this.update(),this.codeFunc.animateSetCurrentLine(1,this.animator);const m=this.memory.createMemoryId();m.animateSetNameAndValue("res","1337",this.animator,{valueColor:e}),this.animator.makeStep(),this.update();const l=this.memory.createMemoryId();for(let c=0;c<=10&&(this.codeFunc.animateSetCurrentLine(2,this.animator),c===0?l.animateSetNameAndValue("i","0",this.animator,{valueColor:e}):l.animateSetValue(c.toFixed(0),this.animator,{color:e}),this.animator.makeStep(),this.update(),c!==10);c++)this.codeFunc.animateSetCurrentLine(3,this.animator),m.animateSetValue((1337+(c+1)*13).toFixed(0),this.animator,{color:e}),this.animator.makeStep(),this.update();this.codeFunc.animateSetCurrentLine(4,this.animator),l.animateColor(n,this.animator);const y=this.codeMain.createTokenHighlight([{lineIndex:3,content:"b"}],r.PURPLE_4),g=this.codeFunc.createTokenHighlight([{lineIndex:4,content:"res"}],r.PURPLE_4);t=this.animator.createLabelAtCurrentTime(),y.animateFadeIn(this.animator,{label:t}),g.animateFadeIn(this.animator,{label:t}),m.animateHighlightIn(this.animator,{label:t,offset:100,color:r.PURPLE_4}),o.animateHighlightIn(this.animator,{label:t,offset:100,color:r.PURPLE_4}),this.animator.makeStep(),this.update(),o.animateCopyValue(m,this.animator,{color:e}),t=this.animator.createLabelAtCurrentTime(),y.animateFadeOut(this.animator,{label:t}),g.animateFadeOut(this.animator,{label:t}),m.animateHighlightOut(this.animator,{label:t}),o.animateHighlightOut(this.animator,{label:t}),this.animator.makeStep(),this.update(),t=this.animator.createLabelAtCurrentTime(),this.animateCallOut(this.codeFunc,{label:t}),d.animateColor(n,this.animator,{label:t}),u.animateColor(n,this.animator,{label:t}),m.animateColor(n,this.animator,{label:t}),o.animateRestoreHLine(this.animator,{label:t}),v.animateFadeOut(this.animator,{label:t}),this.animator.makeStep(),this.update(),this.codeMain.animateSetCurrentLine(i++,this.animator),this.animator.makeStep(),this.update(),this.codeMain.animateSetCurrentLine(i++,this.animator),t=this.animator.createLabelAtCurrentTime(),o.animateColor(n,this.animator,{label:t}),h.animateColor(n,this.animator,{label:t}),this.animator.makeStep(),this.update()}}const S=document.querySelector("#app");S&&(S.innerHTML=`
        <div>
            <h1>${w}</h1>
            <svg xmlns="http://www.w3.org/2000/svg" id=test-svg class="responsive-svg" preserveAspectRatio="xMidYMid meet"></svg>
            <div class="figure-nav">
                <div>Animation : <input type="range" id="slider" min="0" max="100" step="1" value="0" style="width:50%"></div>
                <button id="reset-button"><i class="fa-solid fa-backward-fast"></i></button>
                <button id="prev-button"><i class="fa-solid fa-step-backward"></i></button>
                <button id="play-button"><i class="fa-solid fa-redo"></i></button>
                <button id="next-button"><i class="fa-solid fa-step-forward"></i></button>
                <button id="full-button"><i class="fa-solid fa-play"></i></button>
            </div>
        </div>`);const M=S?.querySelector("#test-svg"),s=document.querySelector("#slider");if(M&&s){const a=new H(M);let e=-1;a.animator.reset(),document.querySelector("#reset-button")?.addEventListener("click",()=>{e=-1,a.animator.stop(),a.animator.reset(),s.value="0"}),document.querySelector("#prev-button")?.addEventListener("click",()=>{e=C.clamp(e-1,0,a.animator.getStepCount()-1),a.animator.resetStep(e),a.update();const i=a.animator.getStepStartTime(e)/a.animator.getMasterDuration();s.value=(i*100).toString()}),document.querySelector("#next-button")?.addEventListener("click",()=>{e=C.clamp(e+1,0,a.animator.getStepCount()-1),a.animator.playStep(e);const i=a.animator.getStepStartTime(e)/a.animator.getMasterDuration();s.value=(i*100).toString()}),document.querySelector("#play-button")?.addEventListener("click",()=>{a.animator.playStep(e)}),document.querySelector("#full-button")?.addEventListener("click",()=>{a.animator.playMaster(),s.value="0"}),s.addEventListener("input",()=>{const i=s.valueAsNumber/100*a.animator.getMasterDuration();a.animator.stop(),a.animator.setMasterElapsed(i),e=a.animator.getStepIndexFromElapsed(i),a.getSVG().update()})}
