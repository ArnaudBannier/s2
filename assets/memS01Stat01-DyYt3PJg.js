import"./modulepreload-polyfill-B5Qt9EMX.js";import{S,a as g,b as f,M as o}from"./s2-lerp-anim-Del0poW1.js";import{B as y,S as b}from"./base-memory-scene-tG6xURp8.js";import{S as L,t as k}from"./s2-code-DN5aJOX6.js";import"./s2-step-animator-CFLkTpzR.js";const A="Etat de la m√©moire : instructions simples 1",M=`**type:int** **fn:main**(**type:void**) {
    **type:int** **var:a** = **num:10**, **var:b** = **num:5**;
    **type:char** **var:c**, **var:d**, **var:e**, **var:f** = **str:'s'**;
    **var:a** = **var:b** + **num:2**;
    **var:b** += **var:a**;
    **var:c** = **var:d** = **var:f**;
    **var:e** = **var:f** - **num:1**;
    **var:a**++;
    **var:b**--;
    **kw:return** **num:0**;
}`,w=1.5,I=new S(640,360).scale(w),V=new g(new S(0,0),new S(8,4.5),I);class x extends y{memory;code;constructor(e){super(e,V),this.code=new L(this),this.code.setParent(this.getSVG()),this.setDefaultCodeStyle(this.code),this.code.setContent(k(M));const r=10;this.memory=new b(this,r,{isStacked:!0,addressStart:64,addressPrefix:"@",addressRadix:10}),this.memory.setParent(this.getSVG()),this.setDefaultMemoryStyle(this.memory),this.update(),this.createAnimation()}createAnimation(){this.animator.makeStep();const e=o.LIME_2,r=o.RED_3,n=o.GREY_5;let i=1;this.code.animateSetCurrentLine(i++,this.animator);const h=this.memory.createMemoryId(),u=this.memory.createMemoryId();let t=this.animator.createLabelAtCurrentTime();h.animateSetNameAndValue("a","10",this.animator,{label:t,valueColor:e}),u.animateSetNameAndValue("b","5",this.animator,{label:t,offset:200,valueColor:e}),this.animator.makeStep(),this.update(),this.code.animateSetCurrentLine(i++,this.animator);const l=this.memory.createMemoryId(),m=this.memory.createMemoryId(),p=this.memory.createMemoryId(),c=this.memory.createMemoryId();t=this.animator.createLabelAtCurrentTime(),l.animateSetNameAndValue("c","?",this.animator,{label:t,offset:100,valueColor:r}),m.animateSetNameAndValue("d","?",this.animator,{label:t,offset:200,valueColor:r}),p.animateSetNameAndValue("e","?",this.animator,{label:t,offset:300,valueColor:r}),c.animateSetNameAndValue("f","115",this.animator,{label:t,offset:400,valueColor:e}),this.animator.makeStep(),this.update(),this.code.animateSetCurrentLine(i++,this.animator),h.animateSetValue("7",this.animator,{color:e}),this.animator.makeStep(),this.update(),this.code.animateSetCurrentLine(i++,this.animator),u.animateSetValue("12",this.animator,{color:e}),this.animator.makeStep(),this.update(),this.code.animateSetCurrentLine(i++,this.animator),t=this.animator.createLabelAtCurrentTime();let d=this.code.createTokenHighlight([{lineIndex:i-1,content:"d"},{lineIndex:i-1,content:"f"}],o.CYAN);d.animateFadeIn(this.animator,{label:t}),c.animateHighlightIn(this.animator,{label:t,offset:100,color:o.CYAN}),m.animateHighlightIn(this.animator,{label:t,offset:200,color:o.CYAN}),m.animateCopyValue(c,this.animator,{color:e}),this.animator.makeStep(),this.update(),t=this.animator.createLabelAtCurrentTime(),d.animateFadeOut(this.animator,{label:t}),d=this.code.createTokenHighlight([{lineIndex:i-1,content:"c"},{lineIndex:i-1,content:"d"}],o.CYAN),d.animateFadeIn(this.animator,{label:t}),c.animateHighlightOut(this.animator,{label:t,offset:100}),l.animateHighlightIn(this.animator,{label:t,offset:200,color:o.CYAN}),l.animateCopyValue(m,this.animator,{color:e}),this.animator.makeStep(),this.update(),t=this.animator.createLabelAtCurrentTime(),d.animateFadeOut(this.animator,{label:t}),m.animateHighlightOut(this.animator,{label:t,offset:100}),l.animateHighlightOut(this.animator,{label:t,offset:200}),this.code.animateSetCurrentLine(i++,this.animator),p.animateSetValue("114",this.animator,{color:e}),this.animator.makeStep(),this.update(),this.code.animateSetCurrentLine(i++,this.animator),h.animateSetValue("8",this.animator,{color:e}),this.animator.makeStep(),this.update(),this.code.animateSetCurrentLine(i++,this.animator),u.animateSetValue("11",this.animator,{color:e}),this.animator.makeStep(),this.update(),this.code.animateSetCurrentLine(i++,this.animator),this.animator.makeStep(),this.update(),this.code.animateSetCurrentLine(i++,this.animator),t=this.animator.createLabelAtCurrentTime(),c.animateColor(n,this.animator,{label:t}),p.animateColor(n,this.animator,{label:t}),m.animateColor(n,this.animator,{label:t}),l.animateColor(n,this.animator,{label:t}),u.animateColor(n,this.animator,{label:t}),h.animateColor(n,this.animator,{label:t}),this.animator.makeStep(),this.update()}}const v=document.querySelector("#app");v&&(v.innerHTML=`
        <div>
            <h1>${A}</h1>
            <svg xmlns="http://www.w3.org/2000/svg" id=test-svg class="responsive-svg" preserveAspectRatio="xMidYMid meet"></svg>
            <div class="figure-nav">
                <div>Animation : <input type="range" id="slider" min="0" max="100" step="1" value="0" style="width:50%"></div>
                <button id="reset-button"><i class="fa-solid fa-backward-fast"></i></button>
                <button id="prev-button"><i class="fa-solid fa-step-backward"></i></button>
                <button id="play-button"><i class="fa-solid fa-redo"></i></button>
                <button id="next-button"><i class="fa-solid fa-step-forward"></i></button>
                <button id="full-button"><i class="fa-solid fa-play"></i></button>
            </div>
        </div>`);const C=v?.querySelector("#test-svg"),s=document.querySelector("#slider");if(C&&s){const a=new x(C);let e=-1;a.animator.reset(),document.querySelector("#reset-button")?.addEventListener("click",()=>{e=-1,a.animator.stop(),a.animator.reset(),s.value="0"}),document.querySelector("#prev-button")?.addEventListener("click",()=>{e=f.clamp(e-1,0,a.animator.getStepCount()-1),a.animator.resetStep(e),a.update();const n=a.animator.getStepStartTime(e)/a.animator.getMasterDuration();s.value=(n*100).toString()}),document.querySelector("#next-button")?.addEventListener("click",()=>{e=f.clamp(e+1,0,a.animator.getStepCount()-1),a.animator.playStep(e);const n=a.animator.getStepStartTime(e)/a.animator.getMasterDuration();s.value=(n*100).toString()}),document.querySelector("#play-button")?.addEventListener("click",()=>{a.animator.playStep(e)}),document.querySelector("#full-button")?.addEventListener("click",()=>{a.animator.playMaster(),s.value="0"}),s.addEventListener("input",()=>{const n=s.valueAsNumber/100*a.animator.getMasterDuration();a.animator.stop(),a.animator.setMasterElapsed(n),e=a.animator.getStepIndexFromElapsed(n),a.getSVG().update()})}
