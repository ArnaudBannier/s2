import"./modulepreload-polyfill-B5Qt9EMX.js";import{S as h,a as g,b as v,M as r}from"./s2-lerp-anim-CO5UdZaq.js";import{B as y,S as C}from"./base-memory-scene-O8q0nCz9.js";import{S as b,t as A}from"./s2-code-50wdqqyA.js";import"./s2-step-animator-CaQhDVDm.js";const L="Etat de la m√©moire : instructions simples 1",k=`**type:int** **fn:main**(**type:void**) {
    **type:int** **var:a** = **num:10**, **var:b** = **num:5**;
    **type:char** **var:c**, **var:d**, **var:e**, **var:f** = **str:'s'**;
    **var:a** = **var:b** + **num:2**;
    **var:b** += **var:a**;
    **var:c** = **var:d** = **var:f**;
    **var:e** = **var:f** - **num:1**;
    **var:a**++;
    **var:b**--;
    **kw:return** **num:0**;
}`,M=1.5,w=new h(640,360).scale(M),I=new g(new h(0,0),new h(8,4.5),w);class V extends y{memory;code;constructor(e){super(e,I),this.code=new b(this),this.code.setParent(this.getSVG()),this.setDefaultCodeStyle(this.code),this.code.setContent(A(k));const n=10;this.memory=new C(this,n,{isStacked:!0,addressStart:64,addressPrefix:"@",addressRadix:10}),this.memory.setParent(this.getSVG()),this.setDefaultMemoryStyle(this.memory),this.update(),this.createAnimation()}createAnimation(){this.animator.makeStep();const e=r.LIME_2,n=r.DEEP_ORANGE_2;let a=1;this.code.animateSetCurrentLine(a++,this.animator);const d=this.memory.createMemoryId(),u=this.memory.createMemoryId();let i=this.animator.createLabelAtCurrentTime();d.animateSetNameAndValue("a","10",this.animator,{label:i,valueColor:e}),u.animateSetNameAndValue("b","5",this.animator,{label:i,offset:200,valueColor:e}),this.animator.makeStep(),this.update(),this.code.animateSetCurrentLine(a++,this.animator);const c=this.memory.createMemoryId(),s=this.memory.createMemoryId(),S=this.memory.createMemoryId(),l=this.memory.createMemoryId();i=this.animator.createLabelAtCurrentTime(),c.animateSetNameAndValue("c","?",this.animator,{label:i,offset:100,valueColor:n}),s.animateSetNameAndValue("d","?",this.animator,{label:i,offset:200,valueColor:n}),S.animateSetNameAndValue("e","?",this.animator,{label:i,offset:300,valueColor:n}),l.animateSetNameAndValue("f","115",this.animator,{label:i,offset:400,valueColor:n}),this.animator.makeStep(),this.update(),this.code.animateSetCurrentLine(a++,this.animator),d.animateSetValue("7",this.animator,{color:e}),this.animator.makeStep(),this.update(),this.code.animateSetCurrentLine(a++,this.animator),u.animateSetValue("12",this.animator,{color:e}),this.animator.makeStep(),this.update(),this.code.animateSetCurrentLine(a++,this.animator),i=this.animator.createLabelAtCurrentTime();let m=this.code.createTokenHighlight([{lineIndex:a-1,content:"d"},{lineIndex:a-1,content:"f"}],r.CYAN);m.animateFadeIn(this.animator,{label:i}),l.animateHighlightIn(this.animator,{label:i,offset:100,color:r.CYAN}),s.animateHighlightIn(this.animator,{label:i,offset:200,color:r.CYAN}),s.animateCopyValue(l,this.animator,{color:n}),this.animator.makeStep(),this.update(),i=this.animator.createLabelAtCurrentTime(),m.animateFadeOut(this.animator,{label:i}),m=this.code.createTokenHighlight([{lineIndex:a-1,content:"c"},{lineIndex:a-1,content:"d"}],r.CYAN),m.animateFadeIn(this.animator,{label:i}),l.animateHighlightOut(this.animator,{label:i,offset:100}),c.animateHighlightIn(this.animator,{label:i,offset:200,color:r.CYAN}),c.animateCopyValue(s,this.animator,{color:n}),this.animator.makeStep(),this.update(),i=this.animator.createLabelAtCurrentTime(),m.animateFadeOut(this.animator,{label:i}),s.animateHighlightOut(this.animator,{label:i,offset:100}),c.animateHighlightOut(this.animator,{label:i,offset:200}),this.code.animateSetCurrentLine(a++,this.animator),S.animateSetValue("114",this.animator,{color:n}),this.animator.makeStep(),this.update(),this.code.animateSetCurrentLine(a++,this.animator),d.animateSetValue("8",this.animator,{color:e}),this.animator.makeStep(),this.update(),this.code.animateSetCurrentLine(a++,this.animator),u.animateSetValue("11",this.animator,{color:e}),this.animator.makeStep(),this.update(),this.code.animateSetCurrentLine(a++,this.animator),this.animator.makeStep(),this.update()}}const p=document.querySelector("#app");p&&(p.innerHTML=`
        <div>
            <h1>${L}</h1>
            <svg xmlns="http://www.w3.org/2000/svg" id=test-svg class="responsive-svg" preserveAspectRatio="xMidYMid meet"></svg>
            <div class="figure-nav">
                <div>Animation : <input type="range" id="slider" min="0" max="100" step="1" value="0" style="width:50%"></div>
                <button id="reset-button"><i class="fa-solid fa-backward-fast"></i></button>
                <button id="prev-button"><i class="fa-solid fa-step-backward"></i></button>
                <button id="play-button"><i class="fa-solid fa-redo"></i></button>
                <button id="next-button"><i class="fa-solid fa-step-forward"></i></button>
                <button id="full-button"><i class="fa-solid fa-play"></i></button>
            </div>
        </div>`);const f=p?.querySelector("#test-svg"),o=document.querySelector("#slider");if(f&&o){const t=new V(f);let e=-1;t.animator.reset(),document.querySelector("#reset-button")?.addEventListener("click",()=>{e=-1,t.animator.stop(),t.animator.reset(),o.value="0"}),document.querySelector("#prev-button")?.addEventListener("click",()=>{e=v.clamp(e-1,0,t.animator.getStepCount()-1),t.animator.resetStep(e),t.update();const a=t.animator.getStepStartTime(e)/t.animator.getMasterDuration();o.value=(a*100).toString()}),document.querySelector("#next-button")?.addEventListener("click",()=>{e=v.clamp(e+1,0,t.animator.getStepCount()-1),t.animator.playStep(e);const a=t.animator.getStepStartTime(e)/t.animator.getMasterDuration();o.value=(a*100).toString()}),document.querySelector("#play-button")?.addEventListener("click",()=>{t.animator.playStep(e)}),document.querySelector("#full-button")?.addEventListener("click",()=>{t.animator.playMaster(),o.value="0"}),o.addEventListener("input",()=>{const a=o.valueAsNumber/100*t.animator.getMasterDuration();t.animator.stop(),t.animator.setMasterElapsed(a),e=t.animator.getStepIndexFromElapsed(a),t.getSVG().update()})}
