import"./modulepreload-polyfill-B5Qt9EMX.js";import{b as h,p as D,l as C,m as k,S as y,a as L,c as F,e as l,M as n,i as u,j as p,C as G}from"./s2-lerp-anim-3QYG2S63.js";import{S as P}from"./s2-step-animator-CW7k99Oi.js";import{S as R}from"./s2-anim-group-BPiEYpRj.js";import{S as _,a as I}from"./s2-draggable-container-CFY40obB.js";class x extends D{boundA=new C(-1/0,-1/0,"world");boundB=new C(1/0,1/0,"world");space=new k("world");setOwner(t=null){this.boundA.setOwner(t),this.boundB.setOwner(t),this.space.setOwner(t)}clearDirty(){this.boundA.clearDirty(),this.boundB.clearDirty(),this.space.clearDirty()}}class O extends _{constructor(t){super(t,new x)}updatePosition(t){const i=this.data.space.get(),a=this.scene.getActiveCamera(),s=this.data.boundA.get(i,a),r=this.data.boundB.get(i,a).subV(s),S=t.get(i,a).subV(s),o=h.clamp01(S.dot(r)/r.lengthSq());t.setV(s.addV(r.scale(o)),i),this.clearDirty()}}const M=1.5,B=new y(640,360).scale(M),E=new L(new y(0,0),new y(8,4.5),B);E.setRotationDeg(-30);class q extends F{circle;path;animator;setCircleDefaultStyle(t){l.setTargets(t.data).setFillColor(n.GREY_6).setStrokeColor(n.GREY_4).setStrokeWidth(4,"view").setFillOpacity(1).setRadius(1,"world")}constructor(t){super(t,E),this.animator=new P(this);const i=this.addFillRect();l.setTargets(i.data).setColor(n.GREY_8);const a=this.addWorldGrid();l.setTargets(a.data).setStrokeColor(n.GREY_6),a.data.geometry.boundA.set(-7,-4,"world"),a.data.geometry.boundB.set(7,4,"world"),a.data.geometry.space.set("world");const s=new I(this);s.setParent(this.getSVG()),s.data.position.set(-3,0,"world"),s.data.radius.set(1,"world");const r=new O(this);r.data.space.set("world"),r.data.boundA.set(-3,3,"world"),r.data.boundB.set(3,-3,"world"),s.setContainer(r);const S=this.addPath();S.moveTo(-7,-4).lineTo(-7,4).lineTo(7,4).lineTo(7,-4).close(),S.data.stroke.width.set(4,"view"),this.path=this.addPath(),this.path.moveTo(-5,0).cubicTo(0,-4,0,-4,5,0).cubicTo(0,4,0,4,-5,0),l.setTargets(this.path.data).setStrokeColor(n.CYAN_5).setStrokeWidth(6,"view").setStrokeLineCap("round").setSpace("world").setPathFrom(0).setPathTo(0),this.circle=this.addCircle(),this.setCircleDefaultStyle(this.circle),this.circle.data.position.set(0,0,"world"),this.circle.data.opacity.set(0);const o=this.addLine();o.data.startPosition.set(0,0,"world"),o.data.endPosition.copy(s.data.position),o.data.stroke.color.copy(n.LIGHT_BLUE_5),o.data.stroke.width.set(2,"view"),o.data.pointerEvents.set("none");const m=this.addCircle();m.data.radius.set(.3,"world"),m.data.fill.color.copy(n.LIGHT_BLUE_5);const d=u.create(this,m.data.position).setCycleDuration(1500).setEasing(p.outExpo);d.commitFinalState();const v=new G(d);s.setOnDrag((g,T)=>{const w=g.getPosition("world");o.data.endPosition.set(h.snap(w.x,.5),h.snap(w.y,1),"world"),d.commitInitialState(),m.data.position.setV(w,"world"),d.commitFinalState(),v.play()}),s.setOnRelease((g,T)=>{g.data.position.copy(o.data.endPosition),d.commitInitialState(),m.data.position.copy(o.data.endPosition),d.commitFinalState(),v.play()});const f=this.path.createArrowTip();f.setParent(this.getSVG()),f.setTipInset(.25).setReversed(!1).setAnchorAlignment(0),this.update(),this.createAnimation()}createAnimation(){let t=u.create(this,this.path.data.pathTo).setCycleDuration(2e3).setEasing(p.inOut);this.path.data.pathTo.set(1),t.commitFinalState(),this.animator.addAnimation(t),t=u.create(this,this.path.data.pathFrom).setCycleDuration(1e3).setEasing(p.inOut),this.path.data.pathFrom.set(.8),this.animator.addAnimation(t.commitFinalState(),"previous-start",1e3),this.animator.makeStep(),this.animator.enableElement(this.circle,!0),t=u.create(this,this.circle.data.opacity).setCycleDuration(500).setEasing(p.inOut),this.circle.data.opacity.set(1),this.animator.addAnimation(t.commitFinalState()),this.animator.makeStep();const i=new R(this).addLerpProperties([this.circle.data.position,this.circle.data.fill.color,this.circle.data.stroke.color,this.circle.data.stroke.color,this.path.data.stroke.color],600,p.inOut).setCycleCount(3).setAlternate(!0);t=u.create(this,this.circle.data.radius).setCycleDuration(1800).setEasing(p.inOut),l.setTargets(this.circle.data).setPosition(-2,0,"world").setFillColor(n.LIGHT_GREEN_9).setStrokeColor(n.LIGHT_GREEN_5).setRadius(20,"view"),l.setTargets(this.path.data).setStrokeColor(n.LIGHT_GREEN_5),this.animator.addAnimation(i.commitLerpFinalStates()),this.animator.addAnimation(t.commitFinalState(),"previous-start",0),this.animator.makeStep(),this.animator.finalize()}}const b=document.querySelector("#app");b&&(b.innerHTML=`
        <div>
            <h1>Animation simple</h1>
            <svg xmlns="http://www.w3.org/2000/svg" id=test-svg class="responsive-svg" preserveAspectRatio="xMidYMid meet"></svg>
            <div class="figure-nav">
                <div>Animation : <input type="range" id="slider" min="0" max="100" step="1" value="0" style="width:50%"></div>
                <button id="reset-button"><i class="fa-solid fa-backward-fast"></i></button>
                <button id="prev-button"><i class="fa-solid fa-step-backward"></i></button>
                <button id="play-button"><i class="fa-solid fa-redo"></i></button>
                <button id="next-button"><i class="fa-solid fa-step-forward"></i></button>
                <button id="full-button"><i class="fa-solid fa-play"></i></button>
            </div>
        </div>`);const A=b?.querySelector("#test-svg"),c=document.querySelector("#slider");if(A&&c){const e=new q(A);let t=-1;e.animator.reset(),document.querySelector("#reset-button")?.addEventListener("click",()=>{t=-1,e.animator.stop(),e.animator.reset(),c.value="0"}),document.querySelector("#prev-button")?.addEventListener("click",()=>{t=h.clamp(t-1,0,e.animator.getStepCount()-1),e.animator.resetStep(t),e.update();const a=e.animator.getStepStartTime(t)/e.animator.getMasterDuration();c.value=(a*100).toString()}),document.querySelector("#next-button")?.addEventListener("click",()=>{t=h.clamp(t+1,0,e.animator.getStepCount()-1),e.animator.playStep(t);const a=e.animator.getStepStartTime(t)/e.animator.getMasterDuration();c.value=(a*100).toString()}),document.querySelector("#play-button")?.addEventListener("click",()=>{e.animator.playStep(t)}),document.querySelector("#full-button")?.addEventListener("click",()=>{e.animator.playMaster(),c.value="0"}),c.addEventListener("input",()=>{const a=c.valueAsNumber/100*e.animator.getMasterDuration();e.animator.stop(),e.animator.setMasterElapsed(a),t=e.animator.getStepIndexFromElapsed(a),e.getSVG().update()})}
