import"./modulepreload-polyfill-B5Qt9EMX.js";import{S as l,a as m,b as h,d as r,M as i,e as S,f as v,i as c,j as n}from"./s2-lerp-anim-PicSQhJC.js";import{S as g}from"./s2-anim-group-CMYaroqb.js";const y=1.5,b=new l(640,360).scale(y),f=new S(new l(0,0),new l(8,4.5),b,1);class w extends h{circle;path;animator;setCircleDefaultStyle(t){r.setTargets(t.data).setFillColor(i.GREY_6).setStrokeColor(i.GREY_4).setStrokeWidth(4,"view").setFillOpacity(1).setRadius(1,"world")}constructor(t){super(t,f),this.animator=new v(this);const o=this.addFillRect();r.setTargets(o.data).setColor(i.GREY_8);const a=this.addWorldGrid();r.setTargets(a.data).setStrokeColor(i.GREY_6),this.path=this.addPath(),this.path.moveTo(-5,0).cubicTo(0,-4,0,-4,5,0).cubicTo(0,4,0,4,-5,0),r.setTargets(this.path.data).setStrokeColor(i.CYAN_5).setStrokeWidth(6,"view").setStrokeLineCap("round").setSpace("world").setPathFrom(0).setPathTo(0),this.circle=this.addCircle(),this.setCircleDefaultStyle(this.circle),this.circle.data.position.set(0,0,"world"),this.circle.data.opacity.set(0);const p=this.path.createArrowTip();p.setParent(this.getSVG()),p.setTipInset(.25).setReversed(!1).setAnchorAlignment(0),this.update(),this.createAnimation()}createAnimation(){let t=c.create(this,this.path.data.pathTo).setCycleDuration(2e3).setEasing(n.inOut);this.path.data.pathTo.set(1),t.commitFinalState(),this.animator.addAnimation(t),t=c.create(this,this.path.data.pathFrom).setCycleDuration(1e3).setEasing(n.inOut),this.path.data.pathFrom.set(.8),this.animator.addAnimation(t.commitFinalState(),"previous-start",1e3),this.animator.makeStep(),this.animator.enableElement(this.circle,!0),t=c.create(this,this.circle.data.opacity).setCycleDuration(500).setEasing(n.inOut),this.circle.data.opacity.set(1),this.animator.addAnimation(t.commitFinalState()),this.animator.makeStep();const o=new g(this).addLerpProperties([this.circle.data.position,this.circle.data.fill.color,this.circle.data.stroke.color,this.circle.data.stroke.color,this.path.data.stroke.color],600,n.inOut).setCycleCount(3).setAlternate(!0);t=c.create(this,this.circle.data.radius).setCycleDuration(1800).setEasing(n.inOut),r.setTargets(this.circle.data).setPosition(-2,0,"world").setFillColor(i.LIGHT_GREEN_9).setStrokeColor(i.LIGHT_GREEN_5).setRadius(20,"view"),r.setTargets(this.path.data).setStrokeColor(i.LIGHT_GREEN_5),this.animator.addAnimation(o.commitLerpFinalStates()),this.animator.addAnimation(t.commitFinalState(),"previous-start",0),this.animator.makeStep(),this.animator.finalize()}}const d=document.querySelector("#app");d&&(d.innerHTML=`
        <div>
            <h1>Animation simple</h1>
            <svg xmlns="http://www.w3.org/2000/svg" id=test-svg class="responsive-svg" preserveAspectRatio="xMidYMid meet"></svg>
            <div class="figure-nav">
                <div>Animation : <input type="range" id="slider" min="0" max="100" step="1" value="0" style="width:50%"></div>
                <button id="reset-button"><i class="fa-solid fa-backward-fast"></i></button>
                <button id="prev-button"><i class="fa-solid fa-step-backward"></i></button>
                <button id="play-button"><i class="fa-solid fa-redo"></i></button>
                <button id="next-button"><i class="fa-solid fa-step-forward"></i></button>
                <button id="full-button"><i class="fa-solid fa-play"></i></button>
            </div>
        </div>`);const u=d?.querySelector("#test-svg"),s=document.querySelector("#slider");if(u&&s){const e=new w(u);let t=-1;e.animator.reset(),document.querySelector("#reset-button")?.addEventListener("click",()=>{t=-1,e.animator.stop(),e.animator.reset(),s.value="0"}),document.querySelector("#prev-button")?.addEventListener("click",()=>{t=m.clamp(t-1,0,e.animator.getStepCount()-1),e.animator.resetStep(t),e.update();const a=e.animator.getStepStartTime(t)/e.animator.getMasterDuration();s.value=(a*100).toString()}),document.querySelector("#next-button")?.addEventListener("click",()=>{t=m.clamp(t+1,0,e.animator.getStepCount()-1),e.animator.playStep(t);const a=e.animator.getStepStartTime(t)/e.animator.getMasterDuration();s.value=(a*100).toString()}),document.querySelector("#play-button")?.addEventListener("click",()=>{e.animator.playStep(t)}),document.querySelector("#full-button")?.addEventListener("click",()=>{e.animator.playMaster(),s.value="0"}),s.addEventListener("input",()=>{const a=s.valueAsNumber/100*e.animator.getMasterDuration();e.animator.stop(),e.animator.setMasterElapsed(a),t=e.animator.getStepIndexFromElapsed(a),e.getSVG().update()})}
