import"./modulepreload-polyfill-B5Qt9EMX.js";import{S as s,a as S,b as c,M as l}from"./s2-lerp-anim-CO5UdZaq.js";import{B as v,S as y}from"./base-memory-scene-O8q0nCz9.js";import{S as f,t as g}from"./s2-code-50wdqqyA.js";import"./s2-step-animator-CaQhDVDm.js";const b="Etat de la m√©moire : instructions simples 2",C=`**type:int** **fn:main**(**type:void**) {
    **type:short** **var:a** = **num:7**;
    **type:float** **var:f** = **num:3.14f**;
    **type:double** **var:d**, **var:g** = **num:2**;
    **type:int** **var:i** = **num:0**;
    
    **var:f** += **var:a**;
    **var:g** = **var:a** + **var:i**;
    **var:i**++;
    **var:f** = **var:a** - **var:i**;
    **kw:return** **num:0**;
}`,L=1.5,k=new s(640,360).scale(L),M=new S(new s(0,0),new s(8,4.5),k);class w extends v{memory;code;constructor(t){super(t,M),this.code=new f(this),this.code.setParent(this.getSVG()),this.setDefaultCodeStyle(this.code),this.code.setContent(g(C));const r=10;this.memory=new y(this,r,{isStacked:!0,addressStart:64,addressPrefix:"@",addressRadix:10}),this.memory.setParent(this.getSVG()),this.setDefaultMemoryStyle(this.memory),this.update(),this.createAnimation()}createAnimation(){this.animator.makeStep();const t=l.LIME_2,r=l.RED_3;let a=1;this.code.animateSetCurrentLine(a++,this.animator),this.memory.createMemoryId().animateSetNameAndValue("a","7",this.animator,{valueColor:t}),this.animator.makeStep(),this.update(),this.code.animateSetCurrentLine(a++,this.animator);const o=this.memory.createMemoryId();o.animateSetNameAndValue("f","3.14",this.animator,{valueColor:t}),this.animator.makeStep(),this.update(),this.code.animateSetCurrentLine(a++,this.animator);const h=this.memory.createMemoryId(),d=this.memory.createMemoryId();let n=this.animator.createLabelAtCurrentTime();h.animateSetNameAndValue("d","?",this.animator,{label:n,valueColor:r}),d.animateSetNameAndValue("g","2",this.animator,{label:n,offset:100,valueColor:t}),this.animator.makeStep(),this.update(),this.code.animateSetCurrentLine(a++,this.animator);const u=this.memory.createMemoryId();n=this.animator.createLabelAtCurrentTime(),u.animateSetNameAndValue("i","0",this.animator,{label:n,valueColor:t}),this.animator.makeStep(),this.update(),a++,this.code.animateSetCurrentLine(a++,this.animator),o.animateSetValue("10.14",this.animator,{color:t}),this.animator.makeStep(),this.update(),this.code.animateSetCurrentLine(a++,this.animator),d.animateSetValue("7",this.animator,{color:t}),this.animator.makeStep(),this.update(),this.code.animateSetCurrentLine(a++,this.animator),u.animateSetValue("1",this.animator,{color:t}),this.animator.makeStep(),this.update(),this.code.animateSetCurrentLine(a++,this.animator),o.animateSetValue("6",this.animator,{color:t}),this.animator.makeStep(),this.update(),this.code.animateSetCurrentLine(a++,this.animator),this.animator.makeStep(),this.update()}}const m=document.querySelector("#app");m&&(m.innerHTML=`
        <div>
            <h1>${b}</h1>
            <svg xmlns="http://www.w3.org/2000/svg" id=test-svg class="responsive-svg" preserveAspectRatio="xMidYMid meet"></svg>
            <div class="figure-nav">
                <div>Animation : <input type="range" id="slider" min="0" max="100" step="1" value="0" style="width:50%"></div>
                <button id="reset-button"><i class="fa-solid fa-backward-fast"></i></button>
                <button id="prev-button"><i class="fa-solid fa-step-backward"></i></button>
                <button id="play-button"><i class="fa-solid fa-redo"></i></button>
                <button id="next-button"><i class="fa-solid fa-step-forward"></i></button>
                <button id="full-button"><i class="fa-solid fa-play"></i></button>
            </div>
        </div>`);const p=m?.querySelector("#test-svg"),i=document.querySelector("#slider");if(p&&i){const e=new w(p);let t=-1;e.animator.reset(),document.querySelector("#reset-button")?.addEventListener("click",()=>{t=-1,e.animator.stop(),e.animator.reset(),i.value="0"}),document.querySelector("#prev-button")?.addEventListener("click",()=>{t=c.clamp(t-1,0,e.animator.getStepCount()-1),e.animator.resetStep(t),e.update();const a=e.animator.getStepStartTime(t)/e.animator.getMasterDuration();i.value=(a*100).toString()}),document.querySelector("#next-button")?.addEventListener("click",()=>{t=c.clamp(t+1,0,e.animator.getStepCount()-1),e.animator.playStep(t);const a=e.animator.getStepStartTime(t)/e.animator.getMasterDuration();i.value=(a*100).toString()}),document.querySelector("#play-button")?.addEventListener("click",()=>{e.animator.playStep(t)}),document.querySelector("#full-button")?.addEventListener("click",()=>{e.animator.playMaster(),i.value="0"}),i.addEventListener("input",()=>{const a=i.valueAsNumber/100*e.animator.getMasterDuration();e.animator.stop(),e.animator.setMasterElapsed(a),t=e.animator.getStepIndexFromElapsed(a),e.getSVG().update()})}
